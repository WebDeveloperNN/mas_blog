Тут то, что не вашло - но то что нужно чтобы вошло
+ тест


3) Расскажите про локальный сервер?
xammp, .......
настройки apache, nginhx 
php artisan serve 

29)Deployment
https://laravel.com/docs/8.x/deployment
ну это явно статья должна быть не тут а в конце где-то)
И вообще я подумаю насчет того что убрать статью давайте-те начнем. Если все это будет написано дальше в основах и так далее. Я просто уберу эту главу. 
Так что пока вопросы не буду писать — потом напишу.





Нужно почитать про composer и по нему тоже вопросы, так так Laravel использует его
Мое: я использую xampp — вот гайд для linux. Конкретное ubuntu: 

После установки Laravel вы должны настроить веб-сервер так, чтобы корневой каталог веб-сайта была «public» папка. Index.php в этом каталоге служит фронт-контроллером для всех HTTP-запросов, поступающих в ваше приложение.
Мое: я так понимаю другие папки должны быть не доступны?

Как настроить сервер для laravel проекта



Такие темы как настройка я думаю нужно вынести в отдельную главу и уже в конце, потомуу что тут надо в веб серверах разбираться
Также deployment это отдельная глава.


(Semantic Versioning)
емантическому управлению версиями
LTS
Composer
xampp
как настроить веб сервер для ларавеь проекта
что такое фреймвокр. В чем отличие от библеотеки?
кеш?
миграции баз данных
базы данных
sql
PHPUnit
стандарту автозагрузки PSR-4.
http https 






Настройку веб-сервера нужно вынести в отдельный файл

Настройка веб-сервера
	Настройка папок……………………………………….
	Красивые адреса……………………………………...

Настройка веб-сервера. 
Настройка папок 
Laravel всегда должен обслуживаться из корня «веб-каталога», настроенного для вашего веб-сервера. Вы не должны пытаться обслуживать приложение Laravel из подкаталога «веб-каталога». Попытка сделать это может открыть доступ к конфиденциальным файлам, присутствующим в вашем приложении.

Красивые ссылки
Apache
Laravel включает public/ .htaccess, который используется для предоставления URL-адресов без переднего контроллера index.php в пути. Перед обслуживанием Laravel с Apache обязательно включите модуль mod_rewrite, чтобы файл .htaccess был обработан сервером.
Если файл .htaccess, поставляемый с Laravel, не работает с вашей установкой Apache, попробуйте следующий вариант:
Options +FollowSymLinks -Indexes
RewriteEngine On

RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [L]

Nginx
Если вы используете Nginx, следующая директива в конфигурации вашего сайта будет направлять все запросы на фронт-контроллер index.php:
location / {
    try_files $uri $uri/ /index.php?$query_string;
}
При использовании Homestead или Valet красивые URL-адреса будут настроены автоматически.

Тут нужно почитать теорию apache и nginx иначе нихуя не ясно.









Настройка
Оглавление
Настройка среды…………………………….
	Типы переменных среды…………………………….
	Получение конфигурации среды …………………………….
	Определение текущей среды…………………………….
	Скрытие переменных среды со страниц отладки……
Доступ к значениям конфигурации…………………………….
Кэширование конфигурации………………………….
Режим обслуживания…………………………….


Настройка среды
Часто бывает полезно иметь разные значения конфигурации в зависимости от среды, в которой выполняется приложение. Например, вы можете захотеть использовать локально другой драйвер кеша, чем на рабочем сервере.
Laravel использует библиотеку  DotEnv PHP. В новой установке Laravel корневой каталог вашего приложения будет содержать файл .env.example. Если вы устанавливаете Laravel через Composer, этот файл будет автоматически скопирован в .env. В противном случае вам следует скопировать файл вручную.

Ваш файл .env не должен быть привязан к системе контроля версий вашего приложения, поскольку каждому разработчику / серверу, использующему ваше приложение, может потребоваться другая конфигурация среды. Более того, это будет угрозой безопасности в случае, если злоумышленник получит доступ к вашему репозиторию системы управления версиями, поскольку любые конфиденциальные учетные данные будут раскрыты. 

Вы можете продолжить включение файла .env.example в свое приложение. Помещая значения заполнителей в пример файла конфигурации, другие разработчики в вашей команде могут четко видеть, какие переменные среды необходимы для запуска вашего приложения. 

Вы также можете создать файл .env.testing. Этот файл заменит файл .env при запуске тестов PHPUnit или выполнении команд Artisan с параметром --env = testing.
Любая переменная в вашем .env-файле может быть переопределена внешними переменными среды, такими как переменные среды на уровне сервера или системы.
Если вам нужно определить переменную среды со значением, содержащим пробелы, вы можете сделать это, заключив значение в двойные кавычки.
APP_NAME = "Мое приложение"


Получение конфигурации среды
Все переменные, перечисленные в этом файле, будут загружены в суперглобал PHP $ _ENV, когда ваше приложение получит запрос. Однако вы можете использовать помощник env для получения значений из этих переменных в ваших файлах конфигурации. Фактически, если вы просмотрите файлы конфигурации Laravel, вы заметите несколько опций, уже использующих этот помощник:
'debug' => env('APP_DEBUG', false),
Второе значение, переданное функции env, - это «значение по умолчанию». Это значение будет использоваться, если для данного ключа не существует переменной среды.


Определение текущей среды
Текущая среда приложения определяется с помощью переменной APP_ENV из вашего файла .env. Вы можете получить доступ к этому значению с помощью метода environment на фасаде App:
$environment = App::environment();
Вы также можете передать аргументы методу среды, чтобы проверить, соответствует ли среда заданному значению. Метод вернет истину, если среда соответствует любому из заданных значений:
if (App::environment('local')) {
    // The environment is local
}

if (App::environment(['local', 'staging'])) {
    // The environment is either local OR staging...
}


Скрытие переменных среды со страниц отладки
Когда исключение не перехвачено и переменная среды APP_DEBUG имеет значение true, на странице отладки будут показаны все переменные среды и их содержимое. В некоторых случаях вы можете захотеть скрыть определенные переменные. Вы можете сделать это, обновив параметр debug_hide в файле конфигурации config / app.php.

Некоторые переменные доступны как в переменных среды, так и в данных сервера/запроса. Следовательно, вам может потребоваться скрыть их как для $ _ENV, так и для $ _SERVER:
return [

    // ...

    'debug_hide' => [
        '_ENV' => [
            'APP_KEY',
            'DB_PASSWORD',
        ],

        '_SERVER' => [
            'APP_KEY',
            'DB_PASSWORD',
        ],

        '_POST' => [
            'password',
        ],
    ],
];


Доступ к значениям конфигурации
Вы можете легко получить доступ к своим значениям конфигурации с помощью глобальной вспомогательной функции config из любого места вашего приложения. Доступ к значениям конфигурации можно получить с помощью синтаксиса «точка», который включает имя файла и параметр, к которому вы хотите получить доступ. Также может быть указано значение по умолчанию, которое будет возвращено, если параметр конфигурации не существует:
$value = config('app.timezone');

// Retrieve a default value if the configuration value does not exist...
$value = config('app.timezone', 'Asia/Seoul');

Чтобы установить значения конфигурации во время выполнения, передайте массив config помощнику:
config(['app.timezone' => 'America/Chicago']);


Кэширование конфигурации
Чтобы повысить скорость своего приложения, вы должны кэшировать все файлы конфигурации в один файл с помощью Artisan-команды config: cache. Это объединит все параметры конфигурации вашего приложения в один файл, который будет быстро загружен фреймворком.
Команду не следует запускать во время локальной разработки, поскольку параметры конфигурации часто нужно будет изменять в ходе разработки вашего приложения. Обычно вам следует запускать команду php artisan config: cache как часть процедуры развертывания в производственной среде. 


Режим обслуживания
Когда ваше приложение находится в режиме обслуживания, специальный шаблон будет отображаться для всех запросов в вашем приложении. Это позволяет легко «отключать» приложение во время его обновления или при обслуживании. Проверка режима обслуживания включена в стандартный набор посредников для вашего приложения. Когда приложение находится в режиме обслуживания, будет вызвано исключение MaintenanceModeException с кодом состояния 503
Чтобы включить режим обслуживания, выполните Artisan-команду down:
php artisan down
Вы также можете указать опцию retry для команды down, которая будет установлена как значение HTTP-заголовка Retry-After:
php artisan down —retry=60


Обход режима обслуживания
Даже находясь в режиме обслуживания, вы можете использовать secret опцию, чтобы указать токен обхода режима обслуживания:

php artisan down --secret = "1630542a-246b-4b66-afa1-dd72a4c43515"

После перевода приложения в режим обслуживания вы можете перейти к URL-адресу приложения, соответствующему этому токену, и Laravel выдаст вашему браузеру файл cookie обхода режима обслуживания:

https://example.com/1630542a-246b-4b66-afa1-dd72a4c43515

При доступе к этому скрытому маршруту вы будете перенаправлены на / route приложения. Как только cookie будет отправлен вашему браузеру, вы сможете просматривать приложение в обычном режиме, как если бы оно не находилось в режиме обслуживания.


Предварительная визуализация представления режима обслуживания
Если вы используете команду php artisan down во время развертывания, ваши пользователи могут иногда сталкиваться с ошибками, если они обращаются к приложению во время обновления ваших зависимостей Composer или других компонентов инфраструктуры. Это происходит потому, что значительная часть инфраструктуры Laravel должна загружаться, чтобы определить, находится ли ваше приложение в режиме обслуживания, и отобразить представление режима обслуживания с использованием механизма шаблонов.

По этой причине Laravel позволяет предварительно отобразить представление режима обслуживания, которое будет возвращено в самом начале цикла запроса. Это представление отображается перед загрузкой любой из зависимостей вашего приложения. Вы можете выполнить предварительный рендеринг шаблона по вашему выбору, используя опцию render команды down:

php artisan down --render = "errors :: 503"


Перенаправление запросов режима обслуживания
В режиме обслуживания Laravel будет отображать представление режима обслуживания для всех URL-адресов приложений, к которым пользователь пытается получить доступ. Если хотите, вы можете указать Laravel перенаправлять все запросы на определенный URL. Это можно сделать с помощью опции redirect. Например, вы можете перенаправить все запросы на / URI:
php artisan down --redirect = /


Отключение режима обслуживания 
Чтобы отключить режим обслуживания, используйте команду up:
php artisan up

Вы можете настроить шаблон режима обслуживания по умолчанию, определив свой собственный шаблон в resources / views / errors / 503.blade.php.


Режим обслуживания и очереди
Пока ваше приложение находится в режиме обслуживания, задания в очереди не обрабатываются. Задания продолжат обрабатываться в обычном режиме после выхода приложения из режима обслуживания.

Альтернативы режиму обслуживания
Поскольку режим обслуживания требует, чтобы ваше приложение простояло несколько секунд, рассмотрите альтернативы, такие как Envoyer, для выполнения развертывания с нулевым временем простоя с помощью Laravel.

Мое: вот я не уверен что эти статьи должны быть тут. Это же начало а тут говорят я так понял как ввести приложение в режим ожидания когда оно развернута на сервере\, но нам нужно что-то изменить. А не рано блядь? Или я что-то не понимаю.




Deployment
https://laravel.com/docs/8.x/deployment
ну это явно статья должна быть не тут а в конце где-то)
И вообще я подумаю насчет того что убрать статью давайте-те начнем. Если все это будет написано дальше в основах и так далее. Я просто уберу эту главу. 
Так что пока вопросы не буду писать — потом напишу.




